package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"fmt"

	"github.com/google/uuid"
	"github.com/noonyuu/todo-list/graph"
	"github.com/noonyuu/todo-list/graph/model"
)

// CreatePriority is the resolver for the createPriority field.
func (r *mutationResolver) CreatePriority(ctx context.Context, name string, order int32) (*model.Priority, error) {
	priority := &model.Priority{
		ID:    uuid.NewString(),
		Name:  name,
		Order: int(order),
	}

	// DBへ保存
	if err := r.DB.Create(priority).Error; err != nil {
		return nil, fmt.Errorf("failed to create priority: %w", err)
	}

	return priority, nil
}

// Order is the resolver for the order field.
func (r *priorityResolver) Order(ctx context.Context, obj *model.Priority) (int32, error) {
	panic(fmt.Errorf("not implemented: Order - order"))
}

// Priorities is the resolver for the priorities field.
func (r *queryResolver) Priorities(ctx context.Context) ([]*model.Priority, error) {
	priorities := []*model.Priority{}

	// DBから全ての優先度を取得
	if err := r.DB.Find(&priorities).Error; err != nil {
		return nil, fmt.Errorf("failed to fetch priorities: %w", err)
	}

	return priorities, nil
}

// Priority returns graph.PriorityResolver implementation.
func (r *Resolver) Priority() graph.PriorityResolver { return &priorityResolver{r} }

type priorityResolver struct{ *Resolver }

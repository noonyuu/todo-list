package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"encoding/base64"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/noonyuu/todo-list/graph"
	"github.com/noonyuu/todo-list/graph/model"
	"gorm.io/gorm"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.TodoInput) (*model.Todo, error) {
	// 入力の検証（優先度・ステータス）
	var priority model.Priority
	if err := r.DB.First(&priority, "id = ?", input.PriorityID).Error; err != nil {
		return nil, fmt.Errorf("invalid priorityId: %s", input.PriorityID)
	}

	var status model.Status
	if err := r.DB.First(&status, "id = ?", input.StatusID).Error; err != nil {
		return nil, fmt.Errorf("invalid statusId: %s", input.StatusID)
	}

	// ラベルを取得
	var labels []*model.Label
	if len(input.LabelIds) > 0 {
		if err := r.DB.Where("id IN ?", input.LabelIds).Find(&labels).Error; err != nil {
			return nil, err
		}
	}

	// todoの作成
	todo := &model.Todo{
		ID:          uuid.NewString(),
		Title:       input.Title,
		Description: input.Description,
		StartDate:   input.StartDate,
		EndDate:     input.EndDate,
		PriorityID:  input.PriorityID,
		StatusID:    input.StatusID,
		CreatedAt:   time.Now(),
		UpdatedAt:   time.Now(),
	}

	// トランザクションを張る
	err := r.DB.Transaction(func(tx *gorm.DB) error {
		// TodoをDBに保存
		if err := tx.Create(todo).Error; err != nil {
			return fmt.Errorf("failed to create todo: %w", err)
		}
		// labelsの検証
		if len(labels) != len(input.LabelIds) {
			return fmt.Errorf("some labels not found")
		}
		// 多対多ラベルを関連付け
		if err := tx.Model(todo).Association("Labels").Replace(labels); err != nil {
			return fmt.Errorf("failed to associate labels: %w", err)
		}
		return nil
	})
	if err != nil {
		return nil, fmt.Errorf("transaction failed: %w", err)
	}

	// 関連データをロードして返す
	if err := r.DB.Preload("Priority").Preload("Status").Preload("Labels").First(todo, "id = ?", todo.ID).Error; err != nil {
		return nil, fmt.Errorf("failed to load related data: %w", err)
	}

	return todo, nil
}

// UpdateTodo is the resolver for the updateTodo field.
func (r *mutationResolver) UpdateTodo(ctx context.Context, id string, input model.TodoInput) (*model.Todo, error) {
	var todo model.Todo
	if err := r.DB.Preload("Labels").First(&todo, "id = ?", id).Error; err != nil {
		return nil, fmt.Errorf("todo not found: %w", err)
	}

	// 入力の検証（優先度・ステータス）
	var priority model.Priority
	if err := r.DB.First(&priority, "id = ?", input.PriorityID).Error; err != nil {
		return nil, fmt.Errorf("invalid priorityId: %s", input.PriorityID)
	}

	var status model.Status
	if err := r.DB.First(&status, "id = ?", input.StatusID).Error; err != nil {
		return nil, fmt.Errorf("invalid statusId: %s", input.StatusID)
	}

	// ラベルを取得
	var labels []*model.Label
	if len(input.LabelIds) > 0 {
		if err := r.DB.Where("id IN ?", input.LabelIds).Find(&labels).Error; err != nil {
			return nil, err
		}
		if len(labels) != len(input.LabelIds) {
			return nil, fmt.Errorf("some labels not found")
		}
	}

	// トランザクションを張る
	err := r.DB.Transaction(func(tx *gorm.DB) error {
		todo.Title = input.Title
		todo.Description = input.Description
		todo.StartDate = input.StartDate
		todo.EndDate = input.EndDate
		todo.PriorityID = input.PriorityID
		todo.StatusID = input.StatusID
		todo.UpdatedAt = time.Now()

		if err := tx.Save(&todo).Error; err != nil {
			return fmt.Errorf("failed to update todo: %w", err)
		}

		if err := tx.Model(&todo).Association("Labels").Replace(labels); err != nil {
			return fmt.Errorf("failed to associate labels: %w", err)
		}

		return nil
	})
	if err != nil {
		return nil, fmt.Errorf("transaction failed: %w", err)
	}

	// 関連データをロードして返す
	if err := r.DB.Preload("Priority").Preload("Status").Preload("Labels").First(&todo, "id = ?", todo.ID).Error; err != nil {
		return nil, fmt.Errorf("failed to load related data: %w", err)
	}

	return &todo, nil
}

// DeleteTodo is the resolver for the deleteTodo field.
func (r *mutationResolver) DeleteTodo(ctx context.Context, id string) (bool, error) {
	todo := &model.Todo{}
	if err := r.DB.First(todo, "id = ?", id).Error; err != nil {
		return false, fmt.Errorf("todo not found: %w", err)
	}

	// トランザクションを張る
	err := r.DB.Transaction(func(tx *gorm.DB) error {
		if err := tx.Model(todo).Association("Labels").Clear(); err != nil {
			return fmt.Errorf("failed to clear labels association: %w", err)
		}
		if err := tx.Delete(todo).Error; err != nil {
			return fmt.Errorf("failed to delete todo: %w", err)
		}
		return nil
	})

	if err != nil {
		return false, fmt.Errorf("transaction failed: %w", err)
	}

	return true, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context, filter *model.TodoFilterInput, sort *model.TodoSortInput, first *int32, after *string) (*model.TodoConnection, error) {
	// ページネーションデフォルトの値
	limit := 10
	if first != nil {
		limit = int(*first)
	}

	db := r.DB.Model(&model.Todo{})

	// フィルターの適用
	if filter != nil {
		if len(filter.StatusIds) > 0 {
			db = db.Where("status_id IN ?", filter.StatusIds)
		}
		if len(filter.LabelIds) > 0 {
			db = db.Joins("JOIN todo_labels ON todo_labels.todo_id = todos.id").
				Where("todo_labels.label_id IN ?", filter.LabelIds).
				Group("todos.id")
		}
		if filter.KeywordTitle != nil && *filter.KeywordTitle != "" {
			keyword := "%" + *filter.KeywordTitle + "%"
			db = db.Where("title LIKE ?", keyword)
		}
		if filter.KeywordDescription != nil && *filter.KeywordDescription != "" {
			keyword := "%" + *filter.KeywordDescription + "%"
			db = db.Where("description LIKE ?", keyword)
		}
	}

	// ソートの適用
	order := "priority_id ASC, end_date ASC"
	if sort != nil && sort.Order != nil && *sort.Order == model.SortOrderDesc {
		order = "priority_id DESC, end_date DESC"
	}
	db = db.Order(order)

	// カーソルの処理
	if after != nil && *after != "" {
		decodedCursor, err := base64.StdEncoding.DecodeString(*after)
		if err != nil {
			return nil, fmt.Errorf("invalid cursor: %w", err)
		}
		db = db.Where("id > ?", string(decodedCursor))
	}

	// データの取得
	var todos []*model.Todo
	if err := db.Limit(limit + 1).Find(&todos).Error; err != nil {
		return nil, fmt.Errorf("failed to fetch todos: %w", err)
	}

	// ページ情報の設定
	hasNextPage := false
	if len(todos) > limit {
		hasNextPage = true
		todos = todos[:limit]
	}

	edges := make([]*model.TodoEdge, len(todos))
	for i, todo := range todos {
		cursor := base64.StdEncoding.EncodeToString([]byte(todo.ID))
		edges[i] = &model.TodoEdge{
			Node:   todo,
			Cursor: cursor,
		}
	}

	endCursor := ""
	if len(edges) > 0 {
		endCursor = edges[0].Cursor
		endCursor = edges[len(edges)-1].Cursor
	}

	pageInfo := &model.PageInfo{
		EndCursor:   &endCursor,
		HasNextPage: hasNextPage,
	}

	return &model.TodoConnection{
		Edges:      edges,
		PageInfo:   pageInfo,
		TotalCount: int32(len(todos)),
	}, nil
}

// Todo is the resolver for the todo field.
func (r *queryResolver) Todo(ctx context.Context, id string) (*model.Todo, error) {
	todo := &model.Todo{}
	if err := r.DB.Preload("Priority").Preload("Status").Preload("Labels").First(todo, "id = ?", id).Error; err != nil {
		return nil, fmt.Errorf("failed to fetch todo: %w", err)
	}
	return todo, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

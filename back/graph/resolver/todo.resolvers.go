package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/noonyuu/todo-list/graph"
	"github.com/noonyuu/todo-list/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.TodoInput) (*model.Todo, error) {
	// 入力の検証（優先度・ステータス）
	var priority model.Priority
	if err := r.DB.First(&priority, "id = ?", input.PriorityID).Error; err != nil {
		return nil, fmt.Errorf("invalid priorityId: %s", input.PriorityID)
	}

	var status model.Status
	if err := r.DB.First(&status, "id = ?", input.StatusID).Error; err != nil {
		return nil, fmt.Errorf("invalid statusId: %s", input.StatusID)
	}

	// ラベルを取得
	var labels []*model.Label
	if len(input.LabelIds) > 0 {
		if err := r.DB.Where("id IN ?", input.LabelIds).Find(&labels).Error; err != nil {
			return nil, err
		}
	}

	// todoの作成
	todo := &model.Todo{
		ID:          uuid.NewString(),
		Title:       input.Title,
		Description: input.Description,
		StartDate:   input.StartDate,
		EndDate:     input.EndDate,
		PriorityID:  input.PriorityID,
		StatusID:    input.StatusID,
		CreatedAt:   time.Now(),
		UpdatedAt:   time.Now(),
	}

	if err := r.DB.Create(todo).Error; err != nil {
		return nil, err
	}

	// 多対多ラベルを関連付け
	if err := r.DB.Model(todo).Association("Labels").Replace(labels); err != nil {
		return nil, fmt.Errorf("failed to associate labels: %w", err)
	}

	// 関連データをロードして返す
	if err := r.DB.Preload("Priority").Preload("Status").Preload("Labels").First(todo, "id = ?", todo.ID).Error; err != nil {
		return nil, err
	}

	return todo, nil
}

// UpdateTodo is the resolver for the updateTodo field.
func (r *mutationResolver) UpdateTodo(ctx context.Context, id string, input model.TodoInput) (*model.Todo, error) {
	// 入力の検証（優先度・ステータス）
	var priority model.Priority
	if err := r.DB.First(&priority, "id = ?", input.PriorityID).Error; err != nil {
		return nil, fmt.Errorf("invalid priorityId: %s", input.PriorityID)
	}

	var status model.Status
	if err := r.DB.First(&status, "id = ?", input.StatusID).Error; err != nil {
		return nil, fmt.Errorf("invalid statusId: %s", input.StatusID)
	}

	// ラベルを取得
	var labels []*model.Label
	if len(input.LabelIds) > 0 {
		if err := r.DB.Where("id IN ?", input.LabelIds).Find(&labels).Error; err != nil {
			return nil, err
		}
	}

	// todoの更新
	todo := &model.Todo{}
	if err := r.DB.First(todo, "id = ?", id).Error; err != nil {
		return nil, fmt.Errorf("todo not found: %w", err)
	}
	todo.Title = input.Title
	todo.Description = input.Description
	todo.StartDate = input.StartDate
	todo.EndDate = input.EndDate
	todo.PriorityID = input.PriorityID
	todo.StatusID = input.StatusID
	todo.UpdatedAt = time.Now()
	if err := r.DB.Save(todo).Error; err != nil {
		return nil, fmt.Errorf("failed to update todo: %w", err)
	}
	// 多対多ラベルを関連付け
	if err := r.DB.Model(todo).Association("Labels").Replace(labels); err != nil {
		return nil, fmt.Errorf("failed to associate labels: %w", err)
	}
	// 関連データを返す
	if err := r.DB.Preload("Priority").Preload("Status").Preload("Labels").First(todo, "id = ?", todo.ID).Error; err != nil {
		return nil, fmt.Errorf("failed to load related data: %w", err)
	}
	return todo, nil
}

// DeleteTodo is the resolver for the deleteTodo field.
func (r *mutationResolver) DeleteTodo(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteTodo - deleteTodo"))
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context, filter *model.TodoFilterInput, sort *model.TodoSortInput, first *int32, after *string) (*model.TodoConnection, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}

// Todo is the resolver for the todo field.
func (r *queryResolver) Todo(ctx context.Context, id string) (*model.Todo, error) {
	todo := &model.Todo{}
	if err := r.DB.Preload("Priority").Preload("Status").Preload("Labels").First(todo, "id = ?", id).Error; err != nil {
		return nil, fmt.Errorf("failed to fetch todo: %w", err)
	}
	return todo, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

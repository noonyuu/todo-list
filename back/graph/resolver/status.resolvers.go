package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"fmt"

	"github.com/google/uuid"
	"github.com/noonyuu/todo-list/graph"
	"github.com/noonyuu/todo-list/graph/model"
)

// CreateStatus is the resolver for the createStatus field.
func (r *mutationResolver) CreateStatus(ctx context.Context, code string, name string, order int32) (*model.Status, error) {
	status := &model.Status{
		ID:    uuid.NewString(),
		Code:  code,
		Name:  name,
		Order: int(order),
	}

	if err := r.DB.Create(status).Error; err != nil {
		return nil, fmt.Errorf("failed to create status: %w", err)
	}

	return status, nil
}

// Statuses is the resolver for the statuses field.
func (r *queryResolver) Statuses(ctx context.Context) ([]*model.Status, error) {
	statuses := []*model.Status{}

	if err := r.DB.Find(&statuses).Error; err != nil {
		return nil, fmt.Errorf("failed to fetch statuses: %w", err)
	}

	return statuses, nil
}

// Order is the resolver for the order field.
func (r *statusResolver) Order(ctx context.Context, obj *model.Status) (int32, error) {
	return int32(obj.Order), nil
}

// Status returns graph.StatusResolver implementation.
func (r *Resolver) Status() graph.StatusResolver { return &statusResolver{r} }

type statusResolver struct{ *Resolver }
